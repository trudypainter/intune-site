// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}



model User {
  id            String    @id @default(cuid())
  name          String?
  email         String   @unique
  emailVerified DateTime?
  image         String? @default("https://thumbs.dreamstime.com/b/default-profile-picture-avatar-photo-placeholder-vector-illustration-default-profile-picture-avatar-photo-placeholder-vector-189495158.jpg")
  listening     Json?
  slug          String @unique @default(cuid())

  accounts      Account[]
  sessions      Session[]

  syncRequested Sync[] @relation("requester")
  syncReceived  Sync[] @relation("receiver")
}

model Sync {
  id                    String    @id @default(cuid())
  compatibility         Int       @default(0)

  requester             User      @relation("requester", fields: [requesterEmail], references: [email])
  requesterEmail        String

  receiver              User      @relation("receiver", fields: [receiverEmail], references: [email])
  receiverEmail         String 

  sharedArtists         Json
  sharedTracks          Json

  createdAt             DateTime  @default(now())

}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}